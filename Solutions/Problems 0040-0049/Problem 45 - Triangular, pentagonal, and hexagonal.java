/*	Problem 45 - Triangular, pentagonal, and hexagonal:

	Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

	Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
	Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
	Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
	It can be verified that T285 = P165 = H143 = 40755.

	Find the next triangle number that is also pentagonal and hexagonal. 

*/

package euler;

public class projectEuler {
	public static void main (String [] args) {
		
		long time = System.nanoTime();
		
		long nextMath = findMatch();
		
		System.out.println("the next overlap is "+nextMath);
		
		time = System.nanoTime() - time;
		System.out.println("\nIt took "+(time/1000000)+"ms to execute");
	}
	
	public static long findMatch() {
		//I will iterate over Hexagonal numbers because they grow the fastest(the x^2 coefficient is the highest)
		//therefore it will require the least amount of steps
		
		int i = 143;	//because the question wanted the next match after the 143th hex number 
		
		while(true) {
			i++;
			long nextHex = i * (2 * i - 1);
			if(isPentagonal(nextHex))
				if(isTriangle(nextHex))
					return nextHex;
		}
		
	}
	
	//for more info about how to inverse a function visit
	//	https://www.chilimath.com/lessons/advanced-algebra/inverse-of-quadratic-function/
	
	public static boolean isTriangle (long n) {
		//if we take the function Tn=n(n+1)/2 and use its inverse
		//(1+Math.sqrt(8x+1))/2, and check for integer solution
		double x = (1+Math.sqrt(8*n+1))/2;
		return (x == (int)x);
	}
	
	public static boolean isPentagonal(long n) {
		//if we take the function Pn=n(3n−1)/2 and use its inverse
		//(Math,sqrt(24x+1) + 1)/6, and check for integer solution
		double x = (Math.sqrt(24*n + 1) + 1.0)/6.0;
		return (x == (int)x);
	}
	
	public static boolean isHexagonal(long n) {
		//if we take the function Hn=n(2n−1) and use its inverse
		//(1+ Math.sqrt(8x+1))/4, and check for integer solution
		double x = (1+ Math.sqrt(8*n+1))/4;
		return (x == (int)x);
	}
	
}
