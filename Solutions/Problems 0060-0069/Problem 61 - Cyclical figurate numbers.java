	/*	Problem 61 - Cyclical figurate numbers:	

		Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) 
		numbers and are generated by the following formulae:
		
		Triangle	 	P3(n) = n(n+1)/2	 	1, 3, 6, 10, 15, ...
		Square	 		P4(n) = n2	 			1, 4, 9, 16, 25, ...
		Pentagonal	 	P5(n) = n(3n−1)/2	 	1, 5, 12, 22, 35, ...
		Hexagonal	 	P6(n) = n(2n−1)	 		1, 6, 15, 28, 45, ...
		Heptagonal	 	P7(n) = n(5n−3)/2	 	1, 7, 18, 34, 55, ...
		Octagonal	 	P8(n) = n(3n−2)	 		1, 8, 21, 40, 65, ...
		
		The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
		
		1. The set is cyclic, in that the last two digits of each number 
		   is the first two digits of the next number (including the last number with the first).
		2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), 
		   and pentagonal (P5,44=2882), is represented by a different number in the set.
		3. This is the only set of 4-digit numbers with this property.
		
		Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
		triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, 
		is represented by a different number in the set.

	*/

package euler;

import java.util.HashMap;
import java.util.Map.Entry;

public class projectEuler {
		
		
		public static void main (String [] args){
			long time = System.nanoTime();
			
			HashMap <Integer, Integer> polyNumbers = generateList();
			
			findPolyNumberSet(polyNumbers);
			
			time = System.nanoTime() - time;
			System.out.println("\nThe program took "+(time/1000000)+" ms to execute\n");
		}
		
		
		private static void findPolyNumberSet(HashMap<Integer, Integer> polyNumbers) {
			for(Entry<Integer, Integer> i3 : polyNumbers.entrySet()) {
				int x3 = i3.getKey() % 100;
				
				for(Entry<Integer, Integer> i4 : polyNumbers.entrySet()) {
					if(x3 != i4.getKey() / 100)
						continue;
					
					int x4 = i4.getKey() % 100;
					for(Entry<Integer, Integer> i5 : polyNumbers.entrySet()) {
						if(x4 != i5.getKey() / 100)
							continue;
						
						int x5 = i5.getKey() % 100;
						for(Entry<Integer, Integer> i6 : polyNumbers.entrySet()) {
							if(x5 != i6.getKey() / 100)
								continue;
							
							int x6 = i6.getKey() % 100;
							for(Entry<Integer, Integer> i7 : polyNumbers.entrySet()) {
								if(x6 != i7.getKey() / 100)
									continue;
								
								//instead of going inside another loop we can generate the last number in the cycle
								//because he is build from the one before and the one after (the first one)
								int i8 = (i7.getKey() % 100) * 100 + i3.getKey() / 100;
								
								if(!polyNumbers.containsKey(i8))
									continue;
								
								//lets check for unique polynomial 
								int [] counter = new int [6];
								counter[i3.getValue() - 3]++;
								counter[i4.getValue() - 3]++;
								counter[i5.getValue() - 3]++;
								counter[i6.getValue() - 3]++;
								counter[i7.getValue() - 3]++;
								counter[polyNumbers.get(i8)- 3]++;
								
								
								boolean flag = false;
								for(int i : counter)
									if(i != 1)
										flag = true;
								
								if(flag)
									continue;
								
								System.out.println(	i3.getKey()+" "+i3.getValue()+"\n"+
													i4.getKey()+" "+i4.getValue()+"\n"+
													i5.getKey()+" "+i5.getValue()+"\n"+
													i6.getKey()+" "+i6.getValue()+"\n"+
													i7.getKey()+" "+i7.getValue()+"\n"+
													i8+" "+polyNumbers.get(i8)+"\n"+
													"sum: "+(i3.getKey()+i4.getKey()+i5.getKey()+i6.getKey()+i7.getKey()+i8)
													+"\n\n\n");
													return;
								
							}
						}
					}
				}
			}
		}


		private static HashMap <Integer, Integer>  generateList() {

			HashMap <Integer, Integer>  list = new HashMap <Integer, Integer>();
			
			for(int x = 3; x <= 8; x++) {
				
				int i = 1;
				int n = 1;
				
				//go to the first 4-digit number
				while(calculateNextStep(x, ++i) < 1000);
				
				//add all the 4 digit numbers to the list
				while(true) {
					n = calculateNextStep(x, i);
					
					if(n >= 10000)
						break;
					
					list.put(n, x);
					
					i++;
				}
			}	
			return list;
		}
		

		private static int calculateNextStep (int poly, int n) {
			switch (poly) {
			case 3:
				return (n * (n+1) / 2);
			case 4:
				return (n * n);
			case 5: 
				return (n * (3*n - 1)/ 2);
			case 6:
				return (n* (2*n - 1));
			case 7:
				return (n * (5*n - 3) / 2);
			case 8:
				return (n * (3*n - 2));
			}
			
			return -1;
		}
		
		//------------------------cool unused functions-------------------------------
		
		//for more info about how to inverse a function visit
		//	https://www.chilimath.com/lessons/advanced-algebra/inverse-of-quadratic-function/
		
		public static boolean isTriangle (int n) {
			//function T(n) = n(n+1)/2
			//inverse:  T^-1(n) = (1+Math.sqrt(8x+1))/2, 
						
			double x = (1+Math.sqrt(8*n+1))/2;
			return (x == (int)x);
		}
		
		public static boolean isSquare(long n) {
			//function 	S(n) = n^2
			//inverse:	S^-1(n) = Math.sqrt(n)
			
			double x = Math.sqrt(n);
			return (x == (int)x);
		}
		
		public static boolean isPentagonal(int n) {
			//function  P(n) = n(3n−1)/2 
			//inverse:  P^-1(n) = (Math,sqrt(24x+1) + 1)/6
			
			double x = (Math.sqrt(24*n + 1) + 1.0)/6.0;
			return (x == (int)x);
		}
		
		public static boolean isHexagonal(int n) {
			//function Hex(n) = n(2n−1) 
			//inverse: Hex^-1(n) = (1+ Math.sqrt(8x+1))/4
			
			double x = (1+ Math.sqrt(8*n+1))/4;
			return (x == (int)x);
		}

		private static boolean isHeptagonal(int n) {
			//function Hep(n) = n(5n−3)/2
			//inverse: Hep^-1(n) = (1.5 + (Math.sqrt(2.25 + 10x))/5
			
			double x = (1.5 + (Math.sqrt(2.25 + 10 * n)))/5;
			return (x == (int)x);
		}
		
		private static boolean isOctagonal(int n) {
			//function: O(n) = n(3n−2)
			//inverse:	O^-1(n) = (2 + Math.sqrt(4 + 12x)) / 6
			
			double x = (2 + Math.sqrt(4 + 12*n)) / 6;
			return (x == (int)x);
		}
		
		
		public static int findPolyNumber(int n) {
			if(isTriangle(n))
				return 3;
			if(isSquare(n))
				return 4;
			if(isPentagonal(n))
				return 5;
			if(isHexagonal(n))
				return 6;
			if(isHeptagonal(n))
				return 7;
			if(isOctagonal(n))
				return 8;
		
			return -1;
		}		
}